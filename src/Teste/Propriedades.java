/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Teste;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import org.fife.ui.rsyntaxtextarea.AbstractTokenMakerFactory;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rsyntaxtextarea.SyntaxScheme;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMakerFactory;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Pichau
 */
public class Propriedades extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    RSyntaxTextArea textArea = new RSyntaxTextArea(20,60);
    private Color Color;
    DefaultListModel DLM = new DefaultListModel();
    public Propriedades() {
        initComponents();
        LISTAPRINCIPAL.setModel(DLM);
        
        
        DLM.addElement("COMENTARIO MULTILINHA");
        DLM.addElement("STRING");
        DLM.addElement("SEPARADOR");
        DLM.addElement("LOGICO");
        DLM.addElement("IDENTIFICADOR");
        DLM.addElement("OPERADOR");
        DLM.addElement("FUNCAO");
        DLM.addElement("TIPOS DE DADOS");

        ChangeFontBox.removeAllItems();
        ChangeFontBox.addItem("VERDANA"); 
        ChangeFontBox.addItem("SERIF"); 
        ChangeFontBox.addItem("MONOSPACED");

        
        SizeBox.removeAllItems();
        SizeBox.addItem("14");
        SizeBox.addItem("18");
        SizeBox.addItem("24");

        RSyntax();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Exampletext = new javax.swing.JPanel();
        CancelarPropriedades = new javax.swing.JButton();
        Negrito = new javax.swing.JCheckBox();
        AplicarPropriedades1 = new javax.swing.JButton();
        Sublinhado = new javax.swing.JCheckBox();
        It치lico = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        LISTAPRINCIPAL = new javax.swing.JList<>();
        LabelSize = new javax.swing.JLabel();
        LabelFont1 = new javax.swing.JLabel();
        SizeBox = new javax.swing.JComboBox<>();
        ChangeFontBox = new javax.swing.JComboBox<>();
        BackgroudInp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ForegroudInp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Exampletext.setLayout(new java.awt.CardLayout());

        CancelarPropriedades.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        CancelarPropriedades.setText("Cancelar");

        Negrito.setText("Negrito");

        AplicarPropriedades1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        AplicarPropriedades1.setText("Aplicar");
        AplicarPropriedades1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarPropriedades1ActionPerformed(evt);
            }
        });

        Sublinhado.setText("Sublinhado");
        Sublinhado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SublinhadoActionPerformed(evt);
            }
        });

        It치lico.setText("It치lico");

        LISTAPRINCIPAL.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LISTAPRINCIPAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LISTAPRINCIPALMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(LISTAPRINCIPAL);

        LabelSize.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelSize.setText("Size");

        LabelFont1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelFont1.setText("Change Font");

        SizeBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SizeBoxItemStateChanged(evt);
            }
        });

        ChangeFontBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChangeFontBoxItemStateChanged(evt);
            }
        });

        BackgroudInp.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BackgroudInp.setText("Change Color");
        BackgroudInp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackgroudInpActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Set Background");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Set Foreground");

        ForegroudInp.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ForegroudInp.setText("Change Color");
        ForegroudInp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForegroudInpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Exampletext, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(BackgroudInp, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(It치lico)
                                    .addComponent(Sublinhado)
                                    .addComponent(Negrito)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(LabelFont1)
                                .addGap(18, 18, 18)
                                .addComponent(ChangeFontBox, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LabelSize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34))))
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(AplicarPropriedades1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(CancelarPropriedades, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(327, 327, 327)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(438, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(495, Short.MAX_VALUE)
                    .addComponent(ForegroudInp, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(181, 181, 181)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelFont1)
                            .addComponent(ChangeFontBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(LabelSize, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(SizeBox)
                                .addGap(81, 81, 81)))
                        .addComponent(Negrito)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(It치lico)
                            .addComponent(jLabel1)
                            .addComponent(BackgroudInp, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(Sublinhado)))
                .addGap(44, 44, 44)
                .addComponent(Exampletext, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelarPropriedades, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AplicarPropriedades1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(98, 98, 98)
                    .addComponent(jLabel2)
                    .addContainerGap(584, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(87, 87, 87)
                    .addComponent(ForegroudInp, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(573, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SublinhadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SublinhadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SublinhadoActionPerformed

    private void LISTAPRINCIPALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LISTAPRINCIPALMouseClicked
   
    }//GEN-LAST:event_LISTAPRINCIPALMouseClicked

    private void ChangeFontBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChangeFontBoxItemStateChanged
         if (evt.getStateChange() == ItemEvent.SELECTED) {
              String opcao = ChangeFontBox.getSelectedItem().toString();
               int tamanho=14;
                if(SizeBox.getSelectedItem()!=null)
                {
                   
                      tamanho=Integer.parseInt(SizeBox.getSelectedItem().toString());
                }
              
                if (opcao.equals("VERDANA") == true) {
                    
                     textArea.setFont(new Font("Verdana",Font.PLAIN,tamanho));
                }
                if (opcao.equals("SERIF") == true) {
                    
                    textArea.setFont(new Font("Serif",Font.PLAIN,tamanho));
                }
                if (opcao.equals("MONOSPACED") == true) {
                    
                    textArea.setFont(new Font("Monospaced",Font.PLAIN,tamanho));
                }
                
                
              
         }
    }//GEN-LAST:event_ChangeFontBoxItemStateChanged

    private void SizeBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SizeBoxItemStateChanged
       if (evt.getStateChange() == ItemEvent.SELECTED) {
              String opcao = SizeBox.getSelectedItem().toString();
               String fonte="Verdana";
                if(ChangeFontBox.getSelectedItem()!=null)
                {
                    
                      fonte=SizeBox.getSelectedItem().toString();
                }
              
                if (opcao.equals("14") == true) {
                    
                     textArea.setFont(new Font(fonte,Font.PLAIN,14));
                }
                if (opcao.equals("18") == true) {
                    
                    textArea.setFont(new Font(fonte,Font.PLAIN,18));
                }
                if (opcao.equals("24") == true) {
                    
                    textArea.setFont(new Font(fonte,Font.PLAIN,24));
                }
                
                
              
         }
    }//GEN-LAST:event_SizeBoxItemStateChanged

    private void ForegroudInpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForegroudInpActionPerformed
        String selecionado = LISTAPRINCIPAL.getSelectedValue();
      
        
        if(selecionado==null)
        {
            JOptionPane.showMessageDialog(this,"Nao selecionou um Grupo");
        }
        else
        {
           System.out.println(""+selecionado);
            try{
            AbstractTokenMakerFactory atmf = (AbstractTokenMakerFactory)TokenMakerFactory.getDefaultInstance();
            atmf.putMapping("text/myLanguage", "Cores.Cor");
            textArea.setSyntaxEditingStyle("text/myLanguage");
            }
             catch(Exception e)
            {
            
            }

            SyntaxScheme esquema=textArea.getSyntaxScheme();
            Color=JColorChooser.showDialog(this, "Selecione a Cor", Color);

            if(selecionado.equals("COMENTARIO MULTILINHA")==true)
            {
            
                 esquema.getStyle(Token.COMMENT_MULTILINE).foreground=Color;
            }

            if(selecionado.equals("STRING")==true)
            {
             
                esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground=Color;
            }
             if(selecionado.equals("SEPARADOR")==true)
            {
              
                esquema.getStyle(Token.SEPARATOR).foreground=Color;
            }
             if(selecionado.equals("LOGICO")==true)
            {
                 
                esquema.getStyle(Token.RESERVED_WORD_2).foreground=Color;
            }
             if(selecionado.equals("IDENTIFICADOR")==true)
            {
               
                esquema.getStyle(Token.IDENTIFIER).foreground=Color;
            }
             if(selecionado.equals("OPERADOR")==true)
            {
                
                esquema.getStyle(Token.OPERATOR).foreground=Color;
            }
             if(selecionado.equals("FUNCAO")==true)
            {
                  //MUDAR O TEMA DE UM CERTO AGRUPAMENTO
                
                esquema.getStyle(Token.FUNCTION).foreground=Color;
                
            }
             if(selecionado.equals("TIPOS DE DADOS")==true)
            {
               
                esquema.getStyle(Token.DATA_TYPE).foreground=Color;
                
            }
            textArea.setText("/*\n" +
"   Algoritmo de exemplo para teste de compila칞칚o\n" +
"*/\n" +
"algoritmo \"exemplo\"\n" +
"var\n" +
"	x, y, z : inteiro\n" +
"	w :	real\n" +
"	\n" +
"	funcao f(a, b : inteiro; c : real) : real  // Fun칞칚o f()\n" +
"	inicio\n" +
"	   f <- a * b * c\n" +
"	fimfuncao\n" +
"{ Coment치rio estilo Pascal\n" +
"  ------------------------\n" +
"}\n" +
"  \n" +
"inicio\n" +
"	escreva(\"Ol치 mundo!\")\n" +
"	leia(x, y, z)\n" +
"	para x de 10 ate 1 passo 1 decrescente faca\n" +
"	   leia(x, y)\n" +
"	   escreval(x, y)\n" +
"	fimpara\n" +
"	repita\n" +
"	   escreva(x)\n" +
"	   leia(x)\n" +
"	   para x de 10 ate 1 passo 2 decrescente faca\n" +
"	      escreva(\"X: \", x)\n" +
"	   fimpara\n" +
"	ate x > 10\n" +
"	x <- 1\n" +
"	enquanto x < 10 faca\n" +
"	   x <- x + 1\n" +
"	fimenquanto\n" +
"	se x > 10 entao\n" +
"	   escreva(\"X > 10\")\n" +
"	senao\n" +
"	   escreva(\"X <= 10\")\n" +
"	fimse\n" +
"	x <- 10\n" +
"	escreva(\"Resultado para f(\", x, \", \", y, \", \",z, \"): \", f(x,y,z))\n" +
"fimalgoritmo");
        
            textArea.revalidate();
        }
        
         
        
        
    }//GEN-LAST:event_ForegroudInpActionPerformed

    private void BackgroudInpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackgroudInpActionPerformed
       String selecionado = LISTAPRINCIPAL.getSelectedValue();
      
        
        if(selecionado==null)
        {
            JOptionPane.showMessageDialog(this,"Nao selecionou um Grupo");
        }
        else
        {
           System.out.println(""+selecionado);
            try{
            AbstractTokenMakerFactory atmf = (AbstractTokenMakerFactory)TokenMakerFactory.getDefaultInstance();
            //nome da linguagem e O SEgundo parametro e o pacote das suas cores
            atmf.putMapping("text/myLanguage", "Cores.Cor");
            textArea.setSyntaxEditingStyle("text/myLanguage");
            }
             catch(Exception e)
            {
            
            }

            SyntaxScheme esquema=textArea.getSyntaxScheme();
            Color=JColorChooser.showDialog(this, "Selecione a Cor", Color);

            if(selecionado.equals("COMENTARIO MULTILINHA")==true)
            {
                //MUDAR O TEMA DE UM CERTO AGRUPAMENTO
                 esquema.getStyle(Token.COMMENT_MULTILINE).background=Color;
            }

            if(selecionado.equals("STRING")==true)
            {
               
                esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).background=Color;
            }
             if(selecionado.equals("SEPARADOR")==true)
            {
               
                esquema.getStyle(Token.SEPARATOR).background=Color;
            }
             if(selecionado.equals("LOGICO")==true)
            {
                  
                esquema.getStyle(Token.RESERVED_WORD_2).background=Color;
            }
             if(selecionado.equals("IDENTIFICADOR")==true)
            {
               
                esquema.getStyle(Token.IDENTIFIER).background=Color;
            }
             if(selecionado.equals("OPERADOR")==true)
            {
               
                esquema.getStyle(Token.OPERATOR).background=Color;
            }
             if(selecionado.equals("FUNCAO")==true)
            {
                
               
                esquema.getStyle(Token.FUNCTION).background=Color;
                
            }
             if(selecionado.equals("TIPOS DE DADOS")==true)
            {
              
                esquema.getStyle(Token.DATA_TYPE).background=Color;
                
            }
            textArea.setText("/*\n" +
"   Algoritmo de exemplo para teste de compila칞칚o\n" +
"*/\n" +
"algoritmo \"exemplo\"\n" +
"var\n" +
"	x, y, z : inteiro\n" +
"	w :	real\n" +
"	\n" +
"	funcao f(a, b : inteiro; c : real) : real  // Fun칞칚o f()\n" +
"	inicio\n" +
"	   f <- a * b * c\n" +
"	fimfuncao\n" +
"{ Coment치rio estilo Pascal\n" +
"  ------------------------\n" +
"}\n" +
"  \n" +
"inicio\n" +
"	escreva(\"Ol치 mundo!\")\n" +
"	leia(x, y, z)\n" +
"	para x de 10 ate 1 passo 1 decrescente faca\n" +
"	   leia(x, y)\n" +
"	   escreval(x, y)\n" +
"	fimpara\n" +
"	repita\n" +
"	   escreva(x)\n" +
"	   leia(x)\n" +
"	   para x de 10 ate 1 passo 2 decrescente faca\n" +
"	      escreva(\"X: \", x)\n" +
"	   fimpara\n" +
"	ate x > 10\n" +
"	x <- 1\n" +
"	enquanto x < 10 faca\n" +
"	   x <- x + 1\n" +
"	fimenquanto\n" +
"	se x > 10 entao\n" +
"	   escreva(\"X > 10\")\n" +
"	senao\n" +
"	   escreva(\"X <= 10\")\n" +
"	fimse\n" +
"	x <- 10\n" +
"	escreva(\"Resultado para f(\", x, \", \", y, \", \",z, \"): \", f(x,y,z))\n" +
"fimalgoritmo");
        
            textArea.revalidate();
        }
        
         
        
    }//GEN-LAST:event_BackgroudInpActionPerformed

    private void AplicarPropriedades1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarPropriedades1ActionPerformed
       setVisible(false);
       System.out.println("Present Project Directory : "+ System.getProperty("user.dir"));
       String caminho=System.getProperty("user.dir");
       PrintWriter writer;
       try {
           writer = new PrintWriter(caminho+"\\propriedadesvisual\\propriedades.txt", "UTF-8");
           //FONTE
           writer.println(""+ChangeFontBox.getSelectedItem().toString());
           //TAMANHO DA FONTE
           writer.println(""+SizeBox.getSelectedItem().toString());
           
           
           SyntaxScheme esquema=textArea.getSyntaxScheme();
           int r=0;
           int g =0;
           int b=0;
           String hexback="";
           String hexfore="";
           
           r = esquema.getStyle(Token.COMMENT_MULTILINE).background.getRed();
           g = esquema.getStyle(Token.COMMENT_MULTILINE).background.getGreen();
           b = esquema.getStyle(Token.COMMENT_MULTILINE).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.COMMENT_MULTILINE).foreground.getRed();
           g = esquema.getStyle(Token.COMMENT_MULTILINE).foreground.getGreen();
           b = esquema.getStyle(Token.COMMENT_MULTILINE).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("COMMENT_MULTILINE"+","+hexback+","+hexfore);
           
           r = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).background.getRed();
           g = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).background.getGreen();
           b = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground.getRed();
           g = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground.getGreen();
           b = esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("LITERAL_STRING_DOUBLE_QUOTE"+","+hexback+","+hexfore);
           
           r = esquema.getStyle(Token.SEPARATOR).background.getRed();
           g = esquema.getStyle(Token.SEPARATOR).background.getGreen();
           b = esquema.getStyle(Token.SEPARATOR).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.SEPARATOR).foreground.getRed();
           g = esquema.getStyle(Token.SEPARATOR).foreground.getGreen();
           b = esquema.getStyle(Token.SEPARATOR).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("SEPARATOR"+","+hexback+","+hexfore);
           
           r = esquema.getStyle(Token.RESERVED_WORD_2).background.getRed();
           g = esquema.getStyle(Token.RESERVED_WORD_2).background.getGreen();
           b = esquema.getStyle(Token.RESERVED_WORD_2).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.RESERVED_WORD_2).foreground.getRed();
           g = esquema.getStyle(Token.RESERVED_WORD_2).foreground.getGreen();
           b = esquema.getStyle(Token.RESERVED_WORD_2).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("RESERVED_WORD_2"+","+hexback+","+hexfore);
           
          r = esquema.getStyle(Token.IDENTIFIER).background.getRed();
           g = esquema.getStyle(Token.IDENTIFIER).background.getGreen();
           b = esquema.getStyle(Token.IDENTIFIER).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.IDENTIFIER).foreground.getRed();
           g = esquema.getStyle(Token.IDENTIFIER).foreground.getGreen();
           b = esquema.getStyle(Token.IDENTIFIER).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("IDENTIFIER"+","+hexback+","+hexfore);
           
           
            r = esquema.getStyle(Token.OPERATOR).background.getRed();
           g = esquema.getStyle(Token.OPERATOR).background.getGreen();
           b = esquema.getStyle(Token.OPERATOR).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.OPERATOR).foreground.getRed();
           g = esquema.getStyle(Token.OPERATOR).foreground.getGreen();
           b = esquema.getStyle(Token.OPERATOR).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("OPERATOR"+","+hexback+","+hexfore);
           
           
           r = esquema.getStyle(Token.FUNCTION).background.getRed();
           g = esquema.getStyle(Token.FUNCTION).background.getGreen();
           b = esquema.getStyle(Token.FUNCTION).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.FUNCTION).foreground.getRed();
           g = esquema.getStyle(Token.FUNCTION).foreground.getGreen();
           b = esquema.getStyle(Token.FUNCTION).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("FUNCTION"+","+hexback+","+hexfore);
           
           
            r = esquema.getStyle(Token.DATA_TYPE).background.getRed();
           g = esquema.getStyle(Token.DATA_TYPE).background.getGreen();
           b = esquema.getStyle(Token.DATA_TYPE).background.getBlue();
           hexback = String.format("#%02X%02X%02X", r, g, b);
           
           r = esquema.getStyle(Token.DATA_TYPE).foreground.getRed();
           g = esquema.getStyle(Token.DATA_TYPE).foreground.getGreen();
           b = esquema.getStyle(Token.DATA_TYPE).foreground.getBlue();
           hexfore = String.format("#%02X%02X%02X", r, g, b);
           
           writer.println("DATA_TYPE"+","+hexback+","+hexfore);
           
           
           writer.close();
          
       } catch (Exception e) {
           e.printStackTrace();
       }
    

    }//GEN-LAST:event_AplicarPropriedades1ActionPerformed

    public void RSyntax()
    {
        
        textArea.setFont(new Font("Verdana",Font.PLAIN,14));
        
        //SYNTAX STYLE JAVA SE FOR UMA LINGUAGEM JA DEFINIDA
        //textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        
        //PARA UMA LINGUAGEM PROPRIA COMO A NOSSA
        try{
            AbstractTokenMakerFactory atmf = (AbstractTokenMakerFactory)TokenMakerFactory.getDefaultInstance();
            //nome da linguagem e O SEgundo parametro e o pacote das suas cores
            atmf.putMapping("text/myLanguage", "Cores.Cor");
            textArea.setSyntaxEditingStyle("text/myLanguage");
        }
        catch(Exception e)
        {
            
        }
        RTextScrollPane sp = new RTextScrollPane(textArea);
        sp.getGutter().setLineNumberColor(Color.RED);
        sp.getGutter().setLineNumberFont(new Font("Monospaced",Font.BOLD,18));
        sp.getGutter().setBorderColor(Color.yellow);
        Exampletext.add(sp);
        
        //MUDAR A COR
      
        SyntaxScheme esquema=textArea.getSyntaxScheme();
        //MUDAR O TEMA DE UM CERTO AGRUPAMENTO
        esquema.getStyle(Token.RESERVED_WORD).foreground=Color.BLACK;
        
        
        
       
        //PADRAO
        esquema.getStyle(Token.COMMENT_MULTILINE).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.COMMENT_MULTILINE).foreground = Color.decode("#000000");

        esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).background = Color.decode("#FFFFFF");
        esquema.getStyle(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground = Color.decode("#000000");

        esquema.getStyle(Token.SEPARATOR).background = Color.decode("#FFFFFF");
        esquema.getStyle(Token.SEPARATOR).foreground = Color.decode("#000000");

        esquema.getStyle(Token.RESERVED_WORD_2).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.RESERVED_WORD_2).foreground = Color.decode("#000000");

        esquema.getStyle(Token.IDENTIFIER).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.IDENTIFIER).foreground = Color.decode("#000000");

        esquema.getStyle(Token.OPERATOR).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.OPERATOR).foreground = Color.decode("#000000");

        esquema.getStyle(Token.FUNCTION).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.FUNCTION).foreground = Color.decode("#000000");

        esquema.getStyle(Token.DATA_TYPE).background = Color.decode("#FFFFFF");

        esquema.getStyle(Token.DATA_TYPE).foreground = Color.decode("#000000");
        
         
        textArea.setText("/*\n" +
"   Algoritmo de exemplo para teste de compila칞칚o\n" +
"*/\n" +
"algoritmo \"exemplo\"\n" +
"var\n" +
"	x, y, z : inteiro\n" +
"	w :	real\n" +
"	\n" +
"	funcao f(a, b : inteiro; c : real) : real  // Fun칞칚o f()\n" +
"	inicio\n" +
"	   f <- a * b * c\n" +
"	fimfuncao\n" +
"{ Coment치rio estilo Pascal\n" +
"  ------------------------\n" +
"}\n" +
"  \n" +
"inicio\n" +
"	escreva(\"Ol치 mundo!\")\n" +
"	leia(x, y, z)\n" +
"	para x de 10 ate 1 passo 1 decrescente faca\n" +
"	   leia(x, y)\n" +
"	   escreval(x, y)\n" +
"	fimpara\n" +
"	repita\n" +
"	   escreva(x)\n" +
"	   leia(x)\n" +
"	   para x de 10 ate 1 passo 2 decrescente faca\n" +
"	      escreva(\"X: \", x)\n" +
"	   fimpara\n" +
"	ate x > 10\n" +
"	x <- 1\n" +
"	enquanto x < 10 faca\n" +
"	   x <- x + 1\n" +
"	fimenquanto\n" +
"	se x > 10 entao\n" +
"	   escreva(\"X > 10\")\n" +
"	senao\n" +
"	   escreva(\"X <= 10\")\n" +
"	fimse\n" +
"	x <- 10\n" +
"	escreva(\"Resultado para f(\", x, \", \", y, \", \",z, \"): \", f(x,y,z))\n" +
"fimalgoritmo");
        
        //VALIDAR O TEXT AREA
        textArea.revalidate();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Propriedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Propriedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Propriedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Propriedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Propriedades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AplicarPropriedades1;
    private javax.swing.JButton BackgroudInp;
    private javax.swing.JButton CancelarPropriedades;
    private javax.swing.JComboBox<String> ChangeFontBox;
    private javax.swing.JPanel Exampletext;
    private javax.swing.JButton ForegroudInp;
    private javax.swing.JCheckBox It치lico;
    private javax.swing.JList<String> LISTAPRINCIPAL;
    private javax.swing.JLabel LabelFont1;
    private javax.swing.JLabel LabelSize;
    private javax.swing.JCheckBox Negrito;
    private javax.swing.JComboBox<String> SizeBox;
    private javax.swing.JCheckBox Sublinhado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
